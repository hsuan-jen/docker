version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  # golang:                                # 自定义容器名称
    # build:
      # context: ./golang                  # 指定构建使用的 Dockerfile 文件
    # environment:                         # 设置环境变量
      # - TZ=${TZ}
    # privileged: true
    # volumes:                             # 设置挂载目录
      # - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
    # ports:                               # 设置端口映射
      # - "8000:8000"
      # - "8001:8001"
      # - "8002:8002"
      # - "8003:8003"
      # - "9000:9000"
      # - "9001:9001"
      # - "9002:9002"
      # - "9003:9003"
    # stdin_open: true                     # 打开标准输入，可以接受外部输入
    # tty: true
    # networks:
      # - backend
    # restart: always                      # 指定容器退出后的重启策略为始终重启

  etcd:                                  # 自定义容器名称
    build:
      context: ./etcd                    # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:                               # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  # mysql:
    # build:
      # context: ./mysql
    # environment:
      # - TZ=${TZ}
      # - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      # - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      # - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    # privileged: true
    # volumes:
      # - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    # ports:
      # - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    # networks:
      # - backend
    # restart: always

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  etcd-manage:
    build:
      context: ./etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - backend
    restart: always

  prometheus:
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  dtm:
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always

  zookeeper:
    build:
      context: ./zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      # 匿名登录--必须开启
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend
  #volumes:
  #- ./zookeeper:/bitnami/zookeeper
  # 该镜像具体配置参考 https://github.com/bitnami/bitnami-docker-kafka/blob/master/README.md
  kafka:
    build:
      context: ./kafka
    ports:
      - "${KAFKA_PORT}:9092"
      - "${JMX_PORT}:9095"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      # 客户端访问地址，更换成自己的
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # 允许使用PLAINTEXT协议(镜像中默认为关闭,需要手动开启)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # 关闭自动创建 topic 功能
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # 全局消息过期时间 6 小时(测试时可以设置短一点)
      - KAFKA_CFG_LOG_RETENTION_HOURS=6
      # 开启JMX监控
      # - JMX_PORT=9095
    #volumes:
    #- ./kafka:/bitnami/kafka
    networks:
      - backend
    depends_on:
      - zookeeper
  # Web 管理界面 另外也可以用exporter+prometheus+grafana的方式来监控 https://github.com/danielqsj/kafka_exporter
  kafka_manager:
    build:
      context: ./kafka-manager
    ports:
      - "${KAFKA_MANAGE_PORT}:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: letmein
    networks:
      - backend
    depends_on:
      - zookeeper
      - kafka
      
  elasticsearch:
    build:
      context: ./elasticsearch
    restart: always 
    privileged: true    # es运行需要root权限，给予容器内真正root权限才可运行
    environment: # 配置环境变量
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 指定内存限制
        - "discovery.type=single-node" # 指定单节点模式
        - "xpack.security.enabled=false" # 关闭xpack认证
    volumes: # 容器内部目录或者文件挂载到宿主机（本服务器）
        # 时间目录为了容器内部和宿主机时间同步
        - /etc/localtime:/etc/localtime
        # 把容器内部数据目录挂载出来，这样不会数据丢失
        - ./elasticsearch/data/:/usr/share/elasticsearch/data/
        # 挂载配置文件，方便在宿主机直接修改
        - ./elasticsearch/config/elasticsearch.yml:/usr/share/config/elasticsearch.yml
        # 挂载插件目录，方便在宿主机直接管理插件
        - ./elasticsearch/plugins/:/usr/share/elasticsearch/plugins/
    ports: # 把用到的端口从容器映射到宿主机出来，这样才可以在外部连接访问
        - ${ELASTIC_PORT}:9200/tcp
        - ${ELASTIC_CLUSTER_PORT}:9300/tcp
    networks:
      - backend
  kibana:
    build:
      context: ./kibana
    restart: always	
    environment:
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
    volumes:
        - /etc/localtime:/etc/localtime
    depends_on:	# 服务依赖
        - elasticsearch
    ports:
        - ${KIBANA_PORT}:5601/tcp
    networks:
      - backend